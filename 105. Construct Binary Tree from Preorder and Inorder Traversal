class Solution {
public:
    TreeNode* helper(vector<int>& inorder,vector<int>& preorder,int inStart,int inEnd,int preStart,int preEnd){
        int rootVal=preorder[preStart];
        TreeNode *root=new TreeNode(rootVal);
        int rootIndex=inStart;
        while(inorder[rootIndex]!=rootVal)rootIndex++;
        int leftLen=rootIndex-inStart;
        if(leftLen>0){
            root->left=helper(inorder, preorder,inStart,rootIndex-1,preStart+1,preStart+leftLen);
        }
        if(inEnd-inStart-leftLen>0){
            root->right=helper(inorder, preorder,rootIndex+1,inEnd,preStart+leftLen+1,preEnd);
        }
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(inorder.size()==0||preorder.size()==0)return NULL;
        return helper(inorder,preorder,0,inorder.size()-1,0,preorder.size()-1);
    }
};
