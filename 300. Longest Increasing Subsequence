class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        if(n==0)return 0;
        int *dp=new int[n];
        for(int i=0;i<n;i++){
            dp[i]=1;
        }
        int res=1;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]&&dp[j]+1>dp[i]){
                    dp[i]=dp[j]+1;
                    if(dp[i]>res){
                        res=dp[i];
                    }
                }
            }
        }
        delete []dp;
        return res;
    }
};

vector<int> LIS(vector<int>& nums){
	int n = nums.size();
	vector<int> dp(n, 0);
	dp[0] = nums[0];
	int len = 1;
	for (int i = 1; i < n; i++){
		if (nums[i]>dp[len - 1]){
			dp[len++] = nums[i];
		}
		else{
			int pos = binarySearch(dp,0, len - 1, nums[i]);
			dp[pos] = nums[i];
		}
	}
	cout << len << endl;
	return dp;
}
