class Solution {
public:
     int dfs(vector<vector<int>>& matrix,int cur,int x,int y,vector<vector<int>>& visited){
        if(x<0||y<0||x>=matrix.size()||y>=matrix[0].size()){
            return 0;
        }
        
        if(cur>=matrix[x][y])return 0;
        if(visited[x][y]>0)return visited[x][y];
        int l=dfs(matrix,matrix[x][y],x-1,y,visited);
        int r=dfs(matrix,matrix[x][y],x+1,y,visited);
        int u=dfs(matrix,matrix[x][y],x,y+1,visited);
        int d=dfs(matrix,matrix[x][y],x,y-1,visited);
        visited[x][y]=max(l,max(r,max(u,d)))+1;
        return visited[x][y];
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size()==0)return 0;
        int m=matrix.size(),n=matrix[0].size();
        vector<vector<int>> visited(m,vector<int> (n));
        int res=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                res=max(res,dfs(matrix,INT_MIN,i,j,visited));
            }
        }
        return res;
    }
};
