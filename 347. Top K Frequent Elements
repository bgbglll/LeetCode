class Solution {
public:
    int partition(vector<int> &nums,int left,int right){
        int i=left;
        int j=i-1;
        int target=nums[right];
        while(i<right){
            if(nums[i]>target){
                swap(nums[++j],nums[i]);
            }
            i++;
        }
        swap(nums[j+1],nums[right]);
        return j+1;
    }
    int quickSelect(vector<int>& nums,int left,int right,int k){
        int idx=partition(nums,left,right);
        if(idx-left==k-1){
            return nums[idx];
        }
        else if(idx-left>k-1){
            return quickSelect(nums,left,idx-1,k);
        }
        else{
            return quickSelect(nums,idx+1,right,k-(idx-left+1));
        }
    }
    int findKthLargest(vector<int>& nums, int k) {
        return quickSelect(nums,0,nums.size()-1,k);
    }
};
