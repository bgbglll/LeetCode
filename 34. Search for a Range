class Solution {
public:
    int findFirstK(vector<int>& nums, int target){
        int l=0,r=nums.size()-1;
		int mid = 0;
		while (l <= r){
			mid = (l + r) / 2;
			if (nums[mid] == target){
				if ((mid > 0 && nums[mid - 1] != target )|| mid == 0){
					return mid;
				}
				else
					r = mid - 1; 
			}
			else if (nums[mid] < target){
				l = mid + 1;
			}
			else{
				r = mid-1;
			}
		}
        return -1;
    }
    int findLastK(vector<int>& nums, int target){
        int l=0,r=nums.size()-1;
        int mid=0;
        while(l<=r){
			mid = (l + r) / 2;
			if (nums[mid] == target){
				if ((mid < nums.size() - 1 && nums[mid + 1] != target) || mid == nums.size() - 1){
					return mid;
				}
				else
					l = mid + 1;
			}
			else if (nums[mid]>target){
				r = mid - 1;
            }
            else{
				l = mid + 1;
            }
        }
        return -1;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res;
        if(nums.size()==0)return res;
        int l=findFirstK(nums,target);
        int r=findLastK(nums,target);
        res.push_back(l);
        res.push_back(r);
        return res;
    }
};
