class Solution {
public:
    void dfs(set<string> &res,string &s,string sub,int l,int r,int dl,int dr,int lmax,int rmax,int n){
        if(l<r)return;
        if(n==s.size()){
            if(l==r)res.insert(sub);
            return;
        }
        if(s[n]=='('){
            dfs(res,s,sub+'(',l+1,r,dl,dr,lmax,rmax,n+1);
            if(dl<lmax)dfs(res,s,sub,l,r,dl+1,dr,lmax,rmax,n+1);
        }
        else if(s[n]==')'){
            dfs(res,s,sub+')',l,r+1,dl,dr,lmax,rmax,n+1);
            if(dr<rmax)dfs(res,s,sub,l,r,dl,dr+1,lmax,rmax,n+1);
        }
        else{
            dfs(res,s,sub+s[n],l,r,dl,dr,lmax,rmax,n+1);
        }
    }
    vector<string> removeInvalidParentheses(string s) {
        vector<string> res;
        set<string> res_set;
        int l=0,r=0,d=0;
        int valid=0;
        for(int i=0;i<s.size();i++){
            if(s[i]=='('){
                l++;
                d++;
            }
            if(s[i]==')'){
                r++;
                if(d>0){
                    d--;
                    valid++;
                }
            }
        }
        dfs(res_set,s,"",0,0,0,0,l-valid,r-valid,0);
        for(auto &x:res_set){
            res.push_back(x);
        }
        return res;
    }
};
