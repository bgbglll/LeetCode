class Solution {///dfs递归求解
public:
    void dfs(vector<vector<int>>& data, int m, int n, int &curMin,int sum){
	if (m >= data.size()-1){
		if (sum < curMin)
			curMin = sum;
		return;
	}
	dfs(data, m + 1, n, curMin,sum+data[m+1][n]);
	dfs(data, m + 1, n + 1, curMin, sum + data[m+1][n+1]);

}
int minimumTotal(vector<vector<int>>& triangle) {
	int curMin = INT_MAX; 
	dfs(triangle, 0, 0, curMin, triangle[0][0]);
	return curMin;
}
};
int minimumTotal(vector<vector<int>> &triangle){
    if(!triangle.size())return 0;
    vector<vector<int>> dp(triangle);
    int minT=INT_MAX;
    dp[0][0]=triangle[0][0];
    for(int i=1;i<triangle.size();i++){
      for(int j=0;j<=i;j++){
        if(j==0)dp[i][j]=dp[i-1][j]+triangle[i][j];
        else if(j==i)dp[i][j]=dp[i-1][j-1]+triangle[i][j];
        else dp[i][j]=min(dp[i-1][j],dp[i-1][j-1])+triangle[i][j];
      }
    }
    for(int i=0;i<triangle.size();i++)minT=min(minT,dp[triangle.size()-1][i]);
    return minT;
  }
  int minimumTotal(vector<vector<int>> &triangle){
    if(!triangle.size())return 0;
    vector<int> dp(triangle.size());
    int minT=INT_MAX;
    dp[0]=triangle[0][0];
    for(int i=1;i<triangle.size();i++){
      for(int j=i;j>=0;j--){
        if(j==0)dp[j]+=triangle[i][j];
        else if(j==i)dp[j]=dp[j-1]+triangle[i][j];
        else dp[j]=min(dp[j],dp[j-1])+triangle[i][j];
      }
    }
    for(int i=0;i<triangle.size();i++)minT=min(minT,dp[i]);
    return minT;
  }
